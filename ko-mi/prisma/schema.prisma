// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Recipe {
  id          Int      @id @default(autoincrement())
  url         String
  author      String
  description String
  name        String
  keywords    String[]

  ingredients Ingredient[]
  userId      String?
  users       User?        @relation(fields: [userId], references: [id])

  instructions    String[]
  image           String
  aggregateRating Float?
  category        String[]
  publisherName   String?
  publisherUrl    String?
  publisherLogo   String?
  recipeYield     String
  // mainEntityOfPage Boolean
  totalTime       String
  cookTime        String
  prepTime        String

  @@unique([url])
}

model CurrentIngredient {
  id      Int      @id @default(autoincrement())
  name    String
  checked Boolean
  types   String[]

  userId String?
  users  User?   @relation(fields: [userId], references: [id])
}

model Ingredient {
  id    Int      @id @default(autoincrement())
  name  String
  types String[]
  // ingredientsId String

  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model Location {
  id    Int    @id @default(autoincrement())
  store String
  home  String

  ingredientId Int
  Ingredient   Ingredient[]
}

model ReportedURL {
  id        Int     @id @default(autoincrement())
  url       String
  addressed Boolean
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  recipes            Recipe[]
  currentIngredients CurrentIngredient[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
