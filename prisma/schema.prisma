// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Recipe {
  id          Int       @id @default(autoincrement())
  url         String
  author      String
  description String
  name        String

  keywordId   Int?
  keywords    Keyword[]

  ingredients Ingredient[]
  userId      String?
  users       User?        @relation(fields: [userId], references: [id])

  instructions    String[]
  image           String
  aggregateRating Float?
  category        String[]
  publisherName   String?
  publisherUrl    String?
  publisherLogo   String?
  recipeYield     Int
  totalTime       String
  cookTime        String
  prepTime        String

  // I think that I should be able to keep track of what users submit recipes
  // this way users are able to edit 'their' recipes
  // should there be a public/private setting?

  @@unique([url])
}

model Keyword {
  id   Int    @id @default(autoincrement())
  name String

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Ingredient {
  id    Int      @id @default(autoincrement())
  name  String
  types String[]

  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  users UserIngredient[]

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model UserIngredient {
  id           Int     @id @default(autoincrement())
  userId       String
  ingredientId Int?  @map("ingredient_id") // Define custom foreign key name
  checked      Boolean @default(false)
  name         String?

  user       User       @relation(fields: [userId], references: [id])
  ingredient Ingredient? @relation(fields: [ingredientId], references: [id])

  @@unique([id])
}

model Location {
  id    Int    @id @default(autoincrement())
  store String
  home  String

  ingredientId Int
  Ingredient   Ingredient[]
}

model ReportedURL {
  id        Int     @id @default(autoincrement())
  url       String
  addressed Boolean
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  ingredients   UserIngredient[]

  friendsA Friend[] @relation("FriendA")
  friendsB Friend[] @relation("FriendB")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friend {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  friendA   User   @relation("FriendA", fields: [friendAId], references: [id])
  friendAId String

  friendB   User   @relation("FriendB", fields: [friendBId], references: [id])
  friendBId String

  status FriendStatus

  @@unique([friendAId, friendBId])
}
